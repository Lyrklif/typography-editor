{"version":3,"sources":["components/button.js","components/tagsPanel.js","vars.js","components/buttonsPanel.js","components/input.js","components/mainSettingsPanel.js","components/editorPanel.js","components/contentEditable.js","App.js","startingValue.js","serviceWorker.js","index.js"],"names":["Button","props","clickEvent","this","on_off","className","on_off_status","onClick","name","text","classes","React","Component","TagsPanel","state","param","setTag","bind","clearFormat","e","preventDefault","tag","target","commands","formatCommand","i","length","href","prompt","document","execCommand","styles","bgcolor","color","toUpperCase","console","log","container","selection","createRange","parentElement","select","window","getSelection","rangeCount","getRangeAt","startContainer","parentNode","nodeName","outerHTML","innerHTML","tagList","Object","keys","map","elem","index","key","ButtonsPanel","setGlobalParam","reset","switchEditText","download","undo","redo","states","editText","alert","block","querySelector","link","createElement","file","Blob","type","URL","createObjectURL","click","buttons","edit","Input","value","eventHandler","step","onChange","MainSettingsPanel","fontSize","lineHeight","EditorPanel","handleChange","switchShowColorPiper","changeColor","setState","paletteEdit","hex","colorPicker","getAttribute","style","backgroundColor","ContentEditable","onBlur","tabIndex","contentEditable","suppressContentEditableWarning","dangerouslySetInnerHTML","__html","html","App","data","sanitize","inputName","sanitizeHtml","sanitizeParam","startingValue","allowedTags","allowedAttributes","a","parser","lowerCaseTags","transformTags","exclusiveFilter","frame","trim","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d2f9de1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\n\r\n// button\r\nexport default class Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clickEvent = props.clickEvent;\r\n  }\r\n\r\n  render() {\r\n    // если это кнопка on/off\r\n    if (this.props.on_off) {\r\n      return (\r\n        <button\r\n          className={this.props.on_off_status ? 'on' : 'off'}\r\n          onClick={this.clickEvent}\r\n          name={this.props.name}\r\n        >\r\n          <b className=\"uppercase\">\r\n            {this.props.on_off_status ? 'on' : 'off'}\r\n          </b>\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n\r\n      // иначе вернуть обычную кнопку\r\n    } else {\r\n      return (\r\n        <button\r\n          onClick={this.clickEvent}\r\n          className={this.props.classes}\r\n          name={this.props.name}\r\n        >\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\nimport { SketchPicker, CirclePicker } from 'react-color';\r\n\r\nimport {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link\r\n} from '../vars';\r\n\r\n// настройка тегов\r\nexport default class TagsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setTag = this.setTag.bind(this);\r\n    this.clearFormat = this.clearFormat.bind(this);\r\n  }\r\n\r\n  // установить тег (форматирование текста)\r\n  setTag(e) {\r\n    e.preventDefault();\r\n\r\n    let tag = e.target.name;\r\n    let commands = this.state.formatCommand[tag];\r\n\r\n    // если команда для этого тега существует\r\n    if (commands) {\r\n      // применить все заданные команды из массива\r\n      for (let i = 0; i < commands.length; i++) {\r\n        // *** document.execCommand('Название команды', false, значение (если требуется));\r\n\r\n        // если нужно вводить адрес ссылки\r\n        if (tag === formatCommand_link) {\r\n          let href = prompt('Введите путь для ссылки:');\r\n          document.execCommand(commands[i][0], commands[i][1], href);\r\n\r\n          // если нужно  выбирать цвет фона\r\n        } else if (i === 1 && tag === formatCommand_bgcolor) {\r\n          document.execCommand(commands[i][0], commands[i][1], this.props.param.styles.bgcolor);\r\n\r\n          // если нужно  выбирать цвет текста\r\n        } else if (i === 1 && tag === formatCommand_color) {\r\n          document.execCommand(commands[i][0], commands[i][1], this.props.param.styles.color);\r\n\r\n          // [default] просто стилизовать текст\r\n        } else {\r\n          document.execCommand(commands[i][0], commands[i][1], commands[i][2].toUpperCase());\r\n        }\r\n      }\r\n\r\n      // если нужно очистить формат\r\n      if (tag === formatCommand_clear) {\r\n        this.clearFormat();\r\n      }\r\n\r\n      // если команда для этого тега НЕ существует\r\n    } else {\r\n      console.log('Правила форматирования для этого тега не прописаны.\\nСделайте это в файле startingValue.js');\r\n    }\r\n  }\r\n\r\n  //  очистить формат, удалив родительский тег\r\n  clearFormat() {\r\n    let container = null; // блок, с которым работаем\r\n    // если выделен (для IE)\r\n    if (document.selection) {\r\n      // записать выделенный текст\r\n      container = document.selection.createRange().parentElement();\r\n    }\r\n    // если выделен\r\n    else {\r\n      // диапазон текста, который пользователь выделил на странице\r\n      let select = window.getSelection();\r\n\r\n      // если количество диапазонов в выделении > 0\r\n      if (select.rangeCount > 0)\r\n        // записать выделенный текст\r\n        container = select.getRangeAt(0).startContainer.parentNode;\r\n    }\r\n\r\n    // если этот элемент не div и не li\r\n    // *** пояснение:\r\n    // * [div] -> чтобы нельзя было удалить сам блок .content при выделении всего содержимого\r\n    // * [li] -> чтобы нельзя было убирать формат списков (слишком много багов из-за этого) \r\n    if (container.nodeName !== 'DIV' && container.nodeName !== 'LI') {\r\n      container.outerHTML = container.innerHTML; // удалить родительский тег\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // преобразовать объект в массив ключей, чтобы можно было использовать .map    \r\n    let tagsArray = Object.keys(this.state.formatCommand);\r\n\r\n    let tagList = tagsArray.map((elem, index) => {\r\n      return (\r\n        <Button\r\n          key={index}\r\n          param={this.state}\r\n          clickEvent={this.setTag}\r\n          text={elem}\r\n          name={elem}\r\n        />\r\n      )\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={this.props.classes}\r\n      >\r\n        {tagList}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","// переменные \r\n\r\nexport const formatCommand_clear = 'clearFormat';\r\nexport const formatCommand_bgcolor = 'bgcolor';\r\nexport const formatCommand_color = 'color';\r\nexport const formatCommand_link = 'link';\r\n\r\n\r\nexport const default_bgcolor = '#f8e71c';\r\nexport const default_color = '#ff0000';","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class ButtonsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n\r\n\r\n    this.download = this.download.bind(this);\r\n    this.undo = this.undo.bind(this);\r\n    this.redo = this.redo.bind(this);\r\n  }\r\n\r\n  // скачать отредактированный текст\r\n  download() {\r\n    // если режим редактирования выключен\r\n    if (!this.props.param.states.editText) {\r\n      let editableBlock = document.querySelector('.content'); // блок, текст в котором можно редактировать\r\n      let block = editableBlock.outerHTML; // текст внутри блока\r\n\r\n      let link = document.createElement(\"a\"); // сгенерировать ссылку\r\n      let file = new Blob([block], { type: 'txt' }); // сгенерировать файл\r\n      link.href = URL.createObjectURL(file); // сгенерировать href\r\n      link.download = \"text.txt\"; // название и расширение файла\r\n      link.click(); // имитировать нажатие на ссылку\r\n\r\n      // если режим редактирования НЕ выключен\r\n    } else {\r\n      alert('Перед скачиванием нужно выйти из режима редактирования.\\nИначе параметры редактирования не будут применены к тексту');\r\n    }\r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  undo() {\r\n    document.execCommand(\"undo\"); // Отмена последнего действия \r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  redo() {\r\n    document.execCommand(\"redo\"); // Повтор последнего действия \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Отменить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.undo}\r\n          text={this.props.param.buttons.undo}\r\n        />\r\n\r\n\r\n        {/* КНОПКА Повторить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.redo}\r\n          text={this.props.param.buttons.redo}\r\n        />\r\n\r\n\r\n        {/* КНОПКА Режим редактирования текста */}\r\n        <Button\r\n          param={this.props.param}\r\n          on_off='true'\r\n          on_off_status={this.props.param.states.editText}\r\n          clickEvent={this.switchEditText}\r\n          text={this.props.param.buttons.edit}\r\n        />\r\n\r\n\r\n        {/* КНОПКА Повторить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.download}\r\n          text={this.props.param.buttons.download}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.param\r\n    };\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label>\r\n        {this.props.text || 'Input'}\r\n        <input\r\n          type={this.props.type || 'text'}\r\n          name={this.props.name || 'btn'}\r\n          // value={this.props.param || this.state.value} // в этом случае сбрасывается значение\r\n          value={this.props.param} // в этом случае в консоли ошибка\r\n          step={this.props.step || ''}\r\n          onChange={this.eventHandler}\r\n        />\r\n      </label>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Input from './input';\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class MainSettingsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n    this.reset = props.reset;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Вернуть стандартные настройки */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.reset}\r\n          text={this.props.param.buttons.reset}\r\n        />\r\n\r\n\r\n        {/* Размер шрифта */}\r\n        <Input\r\n          param={this.props.param.styles.fontSize}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"fontSize\"\r\n          text=\"Размер шрифта\"\r\n        />\r\n\r\n\r\n        {/* Высота строки */}\r\n        <Input\r\n          param={this.props.param.styles.lineHeight}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"lineHeight\"\r\n          step=\"0.1\"\r\n          text=\"Высота строки\"\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport { SketchPicker, SwatchesPicker } from 'react-color';\r\n\r\nimport Button from './button';\r\nimport TagsPanel from './tagsPanel';\r\nimport ButtonsPanel from './buttonsPanel';\r\nimport MainSettingsPanel from './mainSettingsPanel';\r\n\r\n\r\nimport {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link,\r\n  default_bgcolor,\r\n  default_color,\r\n} from '../vars';\r\n\r\n\r\n// панель редактирования\r\nexport default class EditorPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.switchShowColorPiper = this.switchShowColorPiper.bind(this);\r\n    this.changeColor = this.changeColor.bind(this);\r\n  }\r\n\r\n  // при изменении выбранного цвета в палитре\r\n  handleChange(color) {\r\n    this.setState((state) => ({\r\n      styles: {\r\n        ...state.styles,\r\n        [state.states.paletteEdit]: color.hex, // изменить цвет для палитры\r\n      }\r\n    }));\r\n  }\r\n\r\n  // смена статуса панели [показать/скрыть]\r\n  switchShowColorPiper() {\r\n    this.setState((state) => ({\r\n      states: {\r\n        ...state.states,\r\n        colorPicker: !state.states.colorPicker\r\n      }\r\n    }));\r\n  }\r\n\r\n\r\n  // при открытии панели выбора цвета, нажатием на палитру\r\n  changeColor(e) {\r\n    let param = e.target.getAttribute('name');\r\n\r\n    this.setState((state) => ({\r\n      states: {\r\n        ...state.states,\r\n        paletteEdit: param // изменить палитру, которую сейчас редактируем\r\n      }\r\n    }));\r\n\r\n    this.switchShowColorPiper();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"editor-panel\">\r\n          <h3 className=\"editor-panel__title\">\r\n            Панель редактирования\r\n        </h3>\r\n\r\n          {/* основные настройки */}\r\n          <MainSettingsPanel\r\n            param={this.props.param}\r\n            classes=\"editor-panel__inner\"\r\n            eventHandler={this.setGlobalParam}\r\n            reset={this.reset}\r\n          />\r\n\r\n\r\n          {/* настройка тегов */}\r\n          <TagsPanel\r\n            param={this.state}\r\n            classes=\"editor-panel__inner\"\r\n            switchShowColorPiper={this.switchShowColorPiper}\r\n          />\r\n\r\n\r\n          {/* панель с кнопками */}\r\n          <ButtonsPanel\r\n            param={this.props.param}\r\n            classes=\"editor-panel__inner editor-panel__buttons\"\r\n            switchEditText={this.switchEditText}\r\n          />\r\n\r\n          <div className=\"editor-panel__inner\">\r\n            {/* Выбор цвета фона */}\r\n            <span>Установить фоновый цвет</span>\r\n            <div\r\n              className=\"palette\"\r\n              name={formatCommand_bgcolor}\r\n              onClick={this.changeColor}\r\n              style={\r\n                {\r\n                  backgroundColor: this.state.styles.bgcolor,\r\n                  fontSize: `${this.props.param.styles.fontSize}px`,\r\n                }\r\n              }\r\n            >\r\n            </div>\r\n\r\n            {/* Выбор цвета текста */}\r\n            <span>Установить цвет текста</span>\r\n            <div\r\n              className=\"palette\"\r\n              name={formatCommand_color}\r\n              onClick={this.changeColor}\r\n              style={\r\n                {\r\n                  backgroundColor: this.state.styles.color,\r\n                  fontSize: `${this.props.param.styles.fontSize}px`,\r\n                }\r\n              }\r\n            >\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        {/* Панель выбора цвета */}\r\n        <div\r\n          className={this.state.states.colorPicker ? 'color-picker-wp open' : 'color-picker-wp'}\r\n        >\r\n\r\n          {/* КНОПКА Закрыть */}\r\n          <Button\r\n            param={this.state}\r\n            clickEvent={this.switchShowColorPiper}\r\n            text='X Закрыть'\r\n            classes='color-picker__close'\r\n          />\r\n\r\n          <SwatchesPicker\r\n            onChange={this.handleChange}\r\n            color={this.state.styles.bgcolor}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n// Текст, который можно редактировать\r\nexport default class ContentEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n    \r\n    this.onBlur = this.props.onBlur;\r\n  }\r\n\r\n  render() {\r\n    let createContent = () => {\r\n      return { __html: this.props.param.html };\r\n    }\r\n\r\n    return (\r\n      <div\r\n        tabIndex=\"0\"\r\n        contentEditable={this.props.param.states.editText ? 'true' : 'false'}\r\n        suppressContentEditableWarning={true} // чтобы убрать в консоли предупреждение о contentEditable\r\n        className={this.props.param.states.editText ? 'content edit' : 'content'}\r\n        onBlur={this.onBlur} // событие при потере фокуса \r\n        dangerouslySetInnerHTML={createContent()} // вставить переданный текст\r\n        style={\r\n          {\r\n            fontSize: `${this.props.param.styles.fontSize}px`,\r\n            lineHeight: `${this.props.param.styles.lineHeight}em`\r\n          }\r\n        }\r\n      >\r\n      </div>\r\n    );\r\n  }\r\n};","// React\r\nimport React from 'react';\r\nimport sanitizeHtml from \"sanitize-html\";\r\nimport { render } from '@testing-library/react';\r\n\r\n// Мои компоненты\r\nimport EditorPanel from './components/editorPanel';\r\nimport ContentEditable from './components/contentEditable';\r\nimport Button from './components/button';\r\n\r\n// Стили\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.data;\r\n\r\n    console.log('*** Начальные данные ***\\n', this.state);\r\n\r\n    this.setGlobalParam = this.setGlobalParam.bind(this);\r\n    this.switchEditText = this.switchEditText.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.sanitize = this.sanitize.bind(this);\r\n  }\r\n\r\n  // установить глобальные настройки\r\n  setGlobalParam(e) {\r\n    let inputName = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    this.setState({ styles: { [inputName]: [value] } });\r\n  }\r\n\r\n  // сбросить изменения параметров текста\r\n  reset() {\r\n    this.setState({\r\n      styles: {\r\n        fontSize: this.props.data.styles.fontSize,\r\n        lineHeight: this.props.data.styles.lineHeight,\r\n      }\r\n    });\r\n  }\r\n\r\n  // включить/отключить возможность редактировать текст\r\n  switchEditText() {\r\n    this.setState({\r\n      states: {\r\n        // заменить значение на противоположное\r\n        editText: !this.state.states.editText\r\n      }\r\n    });\r\n\r\n    // если режим редактирования выключен\r\n    if (this.state.states.editText) {\r\n      this.sanitize(); // записать новый текст, удалив неразрешённые теги\r\n    }\r\n  }\r\n\r\n  // записать новый текст, удалив неразрешённые теги\r\n  sanitize() {\r\n    let editableBlock = document.querySelector('.content'); // блок, текст в котором можно редактировать\r\n    let text = editableBlock.innerHTML; // текст внутри блока\r\n\r\n    // если текст изменился\r\n    if (text !== this.state.html) {\r\n      // записать новую версию текста, применив настройки (удалить пустые теги, заменить символы и пр.)\r\n      this.setState({\r\n        html: sanitizeHtml(text, this.state.sanitizeParam)\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"App\">\r\n\r\n        {/* панель редактирования */}\r\n        <EditorPanel\r\n          param={this.state}\r\n          setGlobalParam={this.setGlobalParam}\r\n          switchEditText={this.switchEditText}\r\n          reset={this.reset}\r\n        />\r\n\r\n\r\n        {/* блок, текст в котором можно редактировать */}\r\n        <ContentEditable\r\n          param={this.state}\r\n        />\r\n\r\n      </main>\r\n    );\r\n  };\r\n};","import {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link, \r\n  default_bgcolor,\r\n  default_color,\r\n} from './vars';\r\n\r\n// Начальные значения\r\nexport const startingValue = {\r\n  // стили\r\n  styles: {\r\n    fontSize: 16,\r\n    lineHeight: 2.2,\r\n\r\n    bgcolor: default_bgcolor,\r\n    color: default_color,\r\n  },\r\n\r\n  // состояния элементов \r\n  states: {\r\n    editText: true,\r\n    colorPicker: false,\r\n\r\n    paletteEdit: formatCommand_bgcolor, // какую панель цвета редактировать\r\n  },\r\n\r\n  // параметры для sanitize-html\r\n  sanitizeParam: {\r\n    // разрешённые в редактируемом блоке теги\r\n    allowedTags: false, // разрешить все теги\r\n    // allowedTags: [\r\n    //   'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\r\n    //   'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'sub', 'sup', 'span'\r\n    // ],\r\n    // разрешённые атрибуты\r\n    allowedAttributes: {\r\n      a: ['href', 'name', 'target'],\r\n      '*': ['style', 'color', 'bgcolor', 'background-color']\r\n    },\r\n    parser: {\r\n      lowerCaseTags: true\r\n    },\r\n    // заменить <x> на <y>\r\n    transformTags: {\r\n      'div': 'p',\r\n      'br': '',\r\n      'string': 'b',\r\n      'em': 'i',\r\n      'strike': 's',\r\n    },\r\n    // удалить пусте теги\r\n    exclusiveFilter: function (frame) {\r\n      return (\r\n        !frame.text.trim()\r\n      );\r\n    },\r\n  },\r\n\r\n  /*\r\n  * команды для редактирования текста\r\n  * если key записан в виде [keyName],\r\n  * то его название нужно менять в файле ./vars.js\r\n  * [эти названия используются где-то ещё в коде]\r\n  */\r\n  formatCommand: {\r\n    [formatCommand_clear]: [\r\n      ['removeFormat', false, ''],\r\n      ['unlink', false, ''],\r\n    ],\r\n    h1: [\r\n      ['formatBlock', false, 'h1'],\r\n    ],\r\n    h2: [\r\n      ['formatBlock', false, 'h2'],\r\n    ],\r\n    h3: [\r\n      ['formatBlock', false, 'h3'],\r\n    ],\r\n    h4: [\r\n      ['formatBlock', false, 'h4'],\r\n    ],\r\n    h5: [\r\n      ['formatBlock', false, 'h5'],\r\n    ],\r\n    h6: [\r\n      ['formatBlock', false, 'h6'],\r\n    ],\r\n    p: [\r\n      ['formatBlock', false, 'p'],\r\n    ],\r\n    [formatCommand_link]: [\r\n      ['createLink', false, '#'], // нельзя менять и добавлять новые команды\r\n    ],\r\n    ul: [\r\n      ['insertUnorderedList', false, ''],\r\n    ],\r\n    ol: [\r\n      ['insertOrderedList', false, ''],\r\n    ],\r\n    b: [\r\n      ['bold', false, ''],\r\n    ],\r\n    i: [\r\n      ['italic', false, ''],\r\n    ],\r\n    strike: [\r\n      ['strikeThrough', false, ''],\r\n    ],\r\n    [formatCommand_bgcolor]: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['hiliteColor', false, default_bgcolor],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    [formatCommand_color]: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['foreColor', false, '#ff0000'],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    sup: [\r\n      ['superscript', false, ''],\r\n    ],\r\n    sub: [\r\n      ['subscript', false, ''],\r\n    ],\r\n    underline: [\r\n      ['underline', false, ''],\r\n    ],\r\n    blockquote: [\r\n      ['formatBlock', false, 'blockquote'],\r\n    ],\r\n    hr: [\r\n      ['insertHorizontalRule', false, ''],\r\n    ],\r\n    left: [\r\n      ['justifyLeft', false, ''],\r\n    ],\r\n    center: [\r\n      ['justifyCenter', false, ''],\r\n    ],\r\n    right: [\r\n      ['justifyRight', false, ''],\r\n    ],\r\n    full: [\r\n      ['justifyFull', false, ''],\r\n    ],\r\n  },\r\n\r\n  // кнопки\r\n  buttons: {\r\n    edit: 'Режим редактирования текста',\r\n    reset: 'Вернуть стандартные настройки',\r\n    undo: 'Отменить',\r\n    redo: 'Повторить',\r\n    download: 'Скачать текст с тегами',\r\n  },\r\n\r\n  // текст в редактируемом блоке\r\n  html: `\r\n  <p>v3</p>\r\n  <p><b>Редактируемый текст</b></p>\r\n  <p>Текст и его стили можно изменять, нажав на кнопку <b>Режим редактирования текста</b>.</p>\r\n  <p>Очистить формат текста можно, нажав на <b>clearFormat</b>.</p>\r\n  <p>Аксиома <strike>силлогизма</strike>, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание <i>непредсказуемо</i>. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс <sup>амбивалентно</sup> понимает</p>\r\n  <h2>Заголовок</h2>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n  <ul>\r\n  <li>Аксиома</li>\r\n  <li>силлогизма</li>\r\n  <li>по определению</li>\r\n  </ul>\r\n  <blockquote>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</blockquote>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n`\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {startingValue} from './startingValue';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Начальные значения\r\nconst data = startingValue;\r\n\r\nReactDOM.render(<App data={data} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}