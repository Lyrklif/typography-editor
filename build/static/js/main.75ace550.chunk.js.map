{"version":3,"sources":["components/tag.js","components/tagsPanel.js","components/button.js","components/buttonsPanel.js","components/input.js","components/mainSettingsPanel.js","components/editorPanel.js","components/contentEditable.js","App.js","serviceWorker.js","index.js","startingValue.js"],"names":["Tag","props","eventHandler","onClick","this","className","classes","name","text","React","Component","TagsPanel","state","param","tagList","Object","keys","formatСommand","map","elem","index","key","Button","clickEvent","on_off","on_off_status","ButtonsPanel","setGlobalParam","reset","switchEditText","states","editText","buttons","edit","Input","value","type","step","onChange","e","target","MainSettingsPanel","styles","fontSize","lineHeight","EditorPanel","setTag","ContentEditable","onBlur","tabIndex","contentEditable","suppressContentEditableWarning","dangerouslySetInnerHTML","__html","html","style","App","clearFormat","container","document","selection","createRange","parentElement","select","window","getSelection","rangeCount","getRangeAt","startContainer","parentNode","nodeName","outerHTML","innerHTML","sanitize","editableBlock","querySelector","setState","sanitizeHtml","sanitizeParam","data","console","log","bind","inputName","preventDefault","tag","commands","i","length","execCommand","toUpperCase","Boolean","location","hostname","match","allowedTags","allowedAttributes","a","parser","lowerCaseTags","transformTags","exclusiveFilter","frame","trim","h1","h2","h3","h4","h5","h6","p","ul","ol","b","strike","bgcolor","color","sup","sub","underline","blockquote","hr","left","center","right","full","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75ace550.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Tag extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = props;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        onClick={this.eventHandler}\r\n        className={this.props.classes}\r\n        name={this.props.text}\r\n      >\r\n        {this.props.text || 'Tag'}\r\n      </button>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Tag from './tag';\r\n\r\n// настройка тегов\r\nexport default class TagsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    // преобразовать объект в массив ключей, чтобы можно было использовать .map    \r\n    let tagsArray = Object.keys(this.state.formatСommand);\r\n\r\n    let tagList = tagsArray.map((elem, index) => {\r\n      return (\r\n        <Tag\r\n          key={index}\r\n          param={this.state}\r\n          eventHandler={this.eventHandler}\r\n          text={elem}\r\n          classes=\"tag\"\r\n        />\r\n      )\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={this.props.classes}\r\n      >\r\n        {tagList}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\n\r\n// button\r\nexport default class Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = props;\r\n\r\n    this.clickEvent = props.clickEvent;\r\n  }\r\n\r\n  render() {\r\n    // если это кнопка on/off\r\n    if (this.props.on_off) {\r\n      return (\r\n        <button\r\n          className={this.props.on_off_status ? 'on' : 'off'}\r\n          onClick={this.clickEvent}\r\n        >\r\n          <b className=\"uppercase\">\r\n            {this.props.on_off_status ? 'on' : 'off'}\r\n          </b>\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n\r\n      // иначе вернуть обычную кнопку\r\n    } else {\r\n      return (\r\n        <button onClick={this.clickEvent} >\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class ButtonsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Режим редактирования текста */}\r\n        <Button\r\n          param={this.props.param}\r\n          on_off='true'\r\n          on_off_status={this.props.param.states.editText}\r\n          clickEvent={this.switchEditText}\r\n          text={this.props.param.buttons.edit}\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.param\r\n    };\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label>\r\n        {this.props.text || 'Input'}\r\n        <input\r\n          type={this.props.type || 'text'}\r\n          name={this.props.name || 'btn'}\r\n          // value={this.props.param || this.state} // из-за этого баг со сбросом значения\r\n          value={this.props.param} // из-за этого в консоли ошибка\r\n          step={this.props.step || ''}\r\n          onChange={e => this.eventHandler(e.target.value, e.target.name)}\r\n        />\r\n      </label>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Input from './input';\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class MainSettingsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n    this.reset = props.reset;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n          {/* КНОПКА Вернуть стандартные настройки */}\r\n          <Button\r\n            param={this.props.param}\r\n            clickEvent={this.reset}\r\n            text={this.props.param.buttons.reset}\r\n          />\r\n\r\n        {/* Размер шрифта */}\r\n        <Input\r\n          param={this.props.param.styles.fontSize}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"fontSize\"\r\n          text=\"Размер шрифта\"\r\n        />\r\n\r\n\r\n        {/* Высота строки */}\r\n        <Input\r\n          param={this.props.param.styles.lineHeight}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"lineHeight\"\r\n          step=\"0.1\"\r\n          text=\"Высота строки\"\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport TagsPanel from './tagsPanel';\r\nimport ButtonsPanel from './buttonsPanel';\r\nimport MainSettingsPanel from './mainSettingsPanel';\r\n\r\n// панель редактирования\r\nexport default class EditorPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n    this.setTag = props.setTag;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"editor-panel\">\r\n        <h3 className=\"editor-panel__title\">\r\n          Панель редактирования\r\n        </h3>\r\n\r\n        {/* основные настройки */}\r\n        <MainSettingsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner\"\r\n          eventHandler={this.setGlobalParam}\r\n          reset={this.reset}\r\n        />\r\n\r\n\r\n        {/* настройка тегов */}\r\n        <TagsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner\"\r\n          eventHandler={this.setTag}\r\n        />\r\n\r\n\r\n        {/* панель с кнопками */}\r\n        <ButtonsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner editor-panel__buttons\"\r\n          setGlobalParam={this.setGlobalParam}\r\n          reset={this.reset}\r\n          switchEditText={this.switchEditText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n// Текст, который можно редактировать\r\nexport default class ContentEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n    \r\n    this.onBlur = this.props.onBlur;\r\n  }\r\n\r\n  render() {\r\n    let createContent = () => {\r\n      return { __html: this.props.param.html };\r\n    }\r\n\r\n    return (\r\n      <div\r\n        tabIndex=\"0\"\r\n        contentEditable={this.props.param.states.editText ? 'true' : 'false'}\r\n        suppressContentEditableWarning={true} // чтобы убрать в консоли предупреждение о contentEditable\r\n        className={this.props.param.states.editText ? 'content edit' : 'content'}\r\n        onBlur={this.onBlur} // событие при  потере фокуса \r\n        dangerouslySetInnerHTML={createContent()} // вставить переданный текст\r\n        style={\r\n          {\r\n            fontSize: `${this.props.param.styles.fontSize}px`,\r\n            lineHeight: `${this.props.param.styles.lineHeight}em`\r\n          }\r\n        }\r\n      >\r\n      </div>\r\n    );\r\n  }\r\n};","// React\r\nimport React from 'react';\r\nimport sanitizeHtml from \"sanitize-html\";\r\nimport { render } from '@testing-library/react';\r\n\r\n// Мои компоненты\r\nimport EditorPanel from './components/editorPanel';\r\nimport ContentEditable from './components/contentEditable';\r\n\r\n// Стили\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.data;\r\n\r\n    console.log('*** Начальные данные ***\\n', this.state);\r\n\r\n    this.setGlobalParam = this.setGlobalParam.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.switchEditText = this.switchEditText.bind(this);\r\n    this.setTag = this.setTag.bind(this);\r\n  }\r\n\r\n  // установить глобальные настройки\r\n  setGlobalParam(value, inputName) {\r\n    this.setState({ styles: { [inputName]: [value] } });\r\n  }\r\n\r\n  //  очистить формат, удалив родительский тег\r\n  clearFormat = () => {\r\n    let container = null; // блок, с которым работаем\r\n    // если выделен (для IE)\r\n    if (document.selection) {\r\n      // записать выделенный текст\r\n      container = document.selection.createRange().parentElement();\r\n    }\r\n    // если выделен\r\n    else {\r\n      // диапазон текста, который пользователь выделил на странице\r\n      let select = window.getSelection();\r\n\r\n      // если количество диапазонов в выделении > 0\r\n      if (select.rangeCount > 0)\r\n        // записать выделенный текст\r\n        container = select.getRangeAt(0).startContainer.parentNode;\r\n    }\r\n\r\n    // если этот элемент не div и не li\r\n    // *** пояснение:\r\n    // * [div] -> чтобы нельзя было удалить сам блок .content при выделении всего содержимого\r\n    // * [li] -> чтобы нельзя было убирать формат списков (слишком много багов из-за этого) \r\n    if (container.nodeName !== 'DIV' && container.nodeName !== 'LI') {\r\n      container.outerHTML = container.innerHTML; // удалить родительский тег\r\n    }\r\n  }\r\n\r\n  // установить тег (форматирование текста)\r\n  setTag(e) {\r\n    e.preventDefault();\r\n\r\n    let tag = e.target.name;\r\n    let commands = this.state.formatСommand[tag];\r\n\r\n    // если команда для этого тега существует\r\n    if (commands) {\r\n      // применить все заданные команды из массива\r\n      for (let i = 0; i < commands.length; i++) {\r\n        // *** document.execCommand('Название команды', false, значение (если требуется));\r\n        document.execCommand(commands[i][0], commands[i][1], commands[i][2].toUpperCase());\r\n      }\r\n\r\n      // если нужно очистить формат\r\n      if (tag === 'clearFormat') {\r\n        this.clearFormat();\r\n      }\r\n\r\n      // если команда для этого тега НЕ существует\r\n    } else {\r\n      console.log('Правила форматирования для этого тега не прописаны.\\nСделайте это в файле startingValue.js');\r\n    }\r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  reset() {\r\n    // this.setState(this.props.data); // вернуть ВСЕ начальные значения\r\n\r\n    this.setState({\r\n      styles: {\r\n        fontSize: this.props.data.styles.fontSize,\r\n        lineHeight: this.props.data.styles.lineHeight,\r\n      }\r\n    });\r\n  }\r\n\r\n  // включить/отключить возможность редактировать текст\r\n  switchEditText() {\r\n    // заменить значение на противоположное\r\n    this.setState({\r\n      states: {\r\n        editText: !this.state.states.editText\r\n      }\r\n    });\r\n\r\n    // если редим редактирования выключен\r\n    if (this.state.states.editText) {\r\n      this.sanitize(); // записать новый текст, удалив неразрешённые теги\r\n    }\r\n  }\r\n\r\n  // записать новый текст, удалив неразрешённые теги\r\n  sanitize = () => {\r\n    let editableBlock = document.querySelector('.content'); // блок, текст в котором можно редактировать\r\n    let text = editableBlock.innerHTML; // текст внутри блока\r\n\r\n    // если содержимое изменилось\r\n    if (text !== this.state.html) {\r\n      // записать новую версию текста, применив настройки (удалить пустые теги, заменить символы и пр.)\r\n      this.setState({\r\n        html: sanitizeHtml(editableBlock.innerHTML, this.state.sanitizeParam)\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <main className=\"App\">\r\n\r\n        {/* панель редактирования */}\r\n        <EditorPanel\r\n          param={this.state}\r\n          setGlobalParam={this.setGlobalParam}\r\n          reset={this.reset}\r\n          switchEditText={this.switchEditText}\r\n          setTag={this.setTag}\r\n        />\r\n\r\n        {/* блок, текст в котором можно редактировать */}\r\n        <ContentEditable\r\n          param={this.state}\r\n        />\r\n\r\n      </main>\r\n    );\r\n  };\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {startingValue} from './startingValue';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Начальные значения\r\nconst data = startingValue;\r\n\r\nReactDOM.render(<App data={data} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// Начальные значения\r\nexport const startingValue = {\r\n  // стили текста\r\n  styles: {\r\n    fontSize: 16,\r\n    lineHeight: 2.2,\r\n  },\r\n\r\n  // состояния элементов \r\n  states: {\r\n    editText: true,\r\n  },\r\n\r\n  // параметры для sanitize-html\r\n  sanitizeParam: {\r\n    // разрешённые в редактируемом блоке теги\r\n    allowedTags: false, // разрешить все теги\r\n    // allowedTags: [\r\n    //   'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\r\n    //   'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'sub', 'sup', 'span'\r\n    // ],\r\n    // разрешённые атрибуты\r\n    allowedAttributes: {\r\n      a: ['href', 'name', 'target'],\r\n      '*': ['style', 'color', 'bgcolor', 'background-color']\r\n    },\r\n    parser: {\r\n      lowerCaseTags: true\r\n    },\r\n    // заменить <x> на <y>\r\n    transformTags: {\r\n      'div': 'p',\r\n      'br': '',\r\n      'string': 'b',\r\n      'em': 'i',\r\n    },\r\n    // удалить пусте теги\r\n    exclusiveFilter: function (frame) {\r\n      return (\r\n        !frame.text.trim()\r\n      );\r\n    },\r\n  },\r\n\r\n  // команды для редактирования текста\r\n  formatСommand: {\r\n    clearFormat: [\r\n      ['removeFormat', false, ''],\r\n      ['unlink', false, ''],\r\n    ],\r\n    h1: [\r\n      ['formatBlock', false, 'h1'],\r\n    ],\r\n    h2: [\r\n      ['formatBlock', false, 'h2'],\r\n    ],\r\n    h3: [\r\n      ['formatBlock', false, 'h3'],\r\n    ],\r\n    h4: [\r\n      ['formatBlock', false, 'h4'],\r\n    ],\r\n    h5: [\r\n      ['formatBlock', false, 'h5'],\r\n    ],\r\n    h6: [\r\n      ['formatBlock', false, 'h6'],\r\n    ],\r\n    p: [\r\n      ['formatBlock', false, 'p'],\r\n    ],\r\n    a: [\r\n      ['createLink', false, '#'],\r\n    ],\r\n    ul: [\r\n      ['insertUnorderedList', false, ''],\r\n    ],\r\n    ol: [\r\n      ['insertOrderedList', false, ''],\r\n    ],\r\n    b: [\r\n      ['bold', false, ''],\r\n    ],\r\n    i: [\r\n      ['italic', false, ''],\r\n    ],\r\n    strike: [\r\n      ['strikeThrough', false, ''],\r\n    ],\r\n    bgcolor: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['hiliteColor', false, 'ffff00'],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    color: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['foreColor', false, '#ff0000'],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    sup: [\r\n      ['superscript', false, ''],\r\n    ],\r\n    sub: [\r\n      ['subscript', false, ''],\r\n    ],\r\n    underline: [\r\n      ['underline', false, ''],\r\n    ],\r\n    blockquote: [\r\n      ['formatBlock', false, 'blockquote'],\r\n    ],\r\n    hr: [\r\n      ['insertHorizontalRule', false, ''],\r\n    ],\r\n    left: [\r\n      ['justifyLeft', false, ''],\r\n    ],\r\n    center: [\r\n      ['justifyCenter', false, ''],\r\n    ],\r\n    right: [\r\n      ['justifyRight', false, ''],\r\n    ],\r\n    full: [\r\n      ['justifyFull', false, ''],\r\n    ],\r\n  },\r\n\r\n  // кнопки\r\n  buttons: {\r\n    edit: 'Режим редактирования текста',\r\n    reset: 'Вернуть стандартные настройки'\r\n  },\r\n\r\n  // текст в редактируемом блоке\r\n  html: `\r\n  <p>v3</p>\r\n  <p><b>Редактируемый текст</b></p>\r\n  <p>Текст и его стили можно изменять, нажав на кнопку <b>Режим редактирования текста</b>.</p>\r\n  <p>Очистить формат текста можно, нажав на <b>clearFormat</b>.</p>\r\n  <p>Аксиома <strike>силлогизма</strike>, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание <i>непредсказуемо</i>. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс <sup>амбивалентно</sup> понимает</p>\r\n  <h2>Заголовок</h2>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n  <ul>\r\n  <li>Аксиома</li>\r\n  <li>силлогизма</li>\r\n  <li>по определению</li>\r\n  </ul>\r\n  <blockquote>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</blockquote>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n`\r\n}"],"sourceRoot":""}