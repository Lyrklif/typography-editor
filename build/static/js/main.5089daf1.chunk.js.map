{"version":3,"sources":["components/button.js","components/buttonPallet.js","components/tagsPanel.js","vars.js","components/buttonsPanel.js","components/input.js","components/mainSettingsPanel.js","components/editorPanel.js","components/contentEditable.js","App.js","startingValue.js","serviceWorker.js","index.js"],"names":["Button","props","clickEvent","this","on_off","icon","className","on_off_status","onClick","name","title","text","classes","React","Component","ButtonPallet","style","backgroundColor","TagsPanel","state","param","setTag","bind","clearFormat","e","preventDefault","tag","target","commands","tagParameters","command","i","length","href","prompt","document","execCommand","styles","bgcolor","color","toUpperCase","console","log","container","selection","createRange","parentElement","select","window","getSelection","rangeCount","getRangeAt","startContainer","parentNode","nodeName","outerHTML","innerHTML","tagList","Object","keys","map","elem","index","key","display","ButtonsPanel","setGlobalParam","reset","download","undo","redo","states","editText","alert","block","querySelector","link","createElement","file","Blob","type","URL","createObjectURL","click","buttons","Input","value","eventHandler","step","onChange","MainSettingsPanel","switchEditText","edit","fontSize","lineHeight","EditorPanel","handleChange","switchShowColorPiper","changeColor","setState","paletteEdit","hex","colorPicker","getAttribute","ContentEditable","onBlur","tabIndex","contentEditable","suppressContentEditableWarning","dangerouslySetInnerHTML","__html","html","App","data","sanitize","inputName","sanitizeHtml","sanitizeParam","startingValue","allowedTags","allowedAttributes","a","parser","lowerCaseTags","transformTags","exclusiveFilter","frame","trim","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5089daf1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\n\r\n// button\r\nexport default class Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clickEvent = props.clickEvent;\r\n  }\r\n\r\n  render() {\r\n    // если это кнопка on/off\r\n    if (this.props.on_off && this.props.icon) {\r\n      return (\r\n        <button\r\n          className={this.props.on_off_status ? 'on' : 'off'}\r\n          onClick={this.clickEvent}\r\n          name={this.props.name}\r\n          title={this.props.text}\r\n        >\r\n          <b className=\"uppercase\">\r\n            {this.props.on_off_status ? 'on' : 'off'}\r\n          </b>\r\n          <span\r\n            className={\"sprite \" + this.props.icon}>\r\n          </span>\r\n          {/* {this.props.text || 'Button'} */}\r\n        </button >\r\n      )\r\n    }\r\n    // если это кнопка on/off\r\n    else if (this.props.on_off) {\r\n      return (\r\n        <button\r\n          className={this.props.on_off_status ? 'on' : 'off'}\r\n          onClick={this.clickEvent}\r\n          name={this.props.name}\r\n        >\r\n          <b className=\"uppercase\">\r\n            {this.props.on_off_status ? 'on' : 'off'}\r\n          </b>\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n    }\r\n    // если это кнопка с иконкой\r\n    else if (this.props.icon) {\r\n      return (\r\n        <button\r\n          onClick={this.clickEvent}\r\n          className={this.props.classes}\r\n          name={this.props.name}\r\n          title={this.props.text}\r\n        >\r\n          <span\r\n            className={\"sprite \" + this.props.icon}>\r\n          </span>\r\n        </button >\r\n      )\r\n\r\n      // иначе вернуть обычную кнопку\r\n    } else {\r\n      return (\r\n        <button\r\n          onClick={this.clickEvent}\r\n          className={this.props.classes}\r\n          name={this.props.name}\r\n        >\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\n\r\n// button\r\nexport default class ButtonPallet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.clickEvent = props.clickEvent;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        onClick={this.clickEvent}\r\n        className={\"button-pallet\"}\r\n        name={this.props.name}\r\n        title={this.props.text}\r\n      >\r\n        <span\r\n          className={\"sprite \" + this.props.icon}>\r\n        </span>\r\n        <span\r\n          className={\"button-pallet__color\"}\r\n          style={{ backgroundColor: this.props.style }}\r\n        >\r\n        </span>\r\n      </button >\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\nimport { SketchPicker, CirclePicker } from 'react-color';\r\n\r\nimport {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link\r\n} from '../vars';\r\n\r\n// настройка тегов\r\nexport default class TagsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setTag = this.setTag.bind(this);\r\n    this.clearFormat = this.clearFormat.bind(this);\r\n  }\r\n\r\n  // установить тег (форматирование текста)\r\n  setTag(e) {\r\n    e.preventDefault();\r\n\r\n    let tag = e.target.name; // тег, который надо установить\r\n    let commands = this.state.tagParameters[tag].command; // команды, прописанные для этого тега\r\n\r\n    // если команды для этого тега существуют\r\n    if (commands) {\r\n      // применить все заданные команды из массива\r\n      for (let i = 0; i < commands.length; i++) {\r\n        // *** document.execCommand('Название команды', false, значение (если требуется));\r\n\r\n        // если нужно вводить адрес ссылки\r\n        if (tag === formatCommand_link) {\r\n          let href = prompt('Введите путь для ссылки:');\r\n          document.execCommand(commands[i][0], commands[i][1], href);\r\n\r\n          // если нужно выбрать цвет фона\r\n        } else if (i === 1 && tag === formatCommand_bgcolor) {\r\n          document.execCommand(commands[i][0], commands[i][1], this.props.param.styles.bgcolor);\r\n\r\n          // если нужно выбрать цвет текста\r\n        } else if (i === 1 && tag === formatCommand_color) {\r\n          document.execCommand(commands[i][0], commands[i][1], this.props.param.styles.color);\r\n\r\n          // [default] просто стилизовать текст\r\n        } else {\r\n          document.execCommand(commands[i][0], commands[i][1], commands[i][2].toUpperCase());\r\n        }\r\n      }\r\n\r\n      // если нужно очистить формат\r\n      if (tag === formatCommand_clear) {\r\n        this.clearFormat();\r\n      }\r\n\r\n      // если команды для этого тега НЕ существуют\r\n    } else {\r\n      console.log('Правила форматирования для этого тега не прописаны.\\nСделайте это в файле startingValue.js');\r\n    }\r\n  }\r\n\r\n  //  очистить формат, удалив родительский тег\r\n  clearFormat() {\r\n    let container = null; // блок, с которым работаем\r\n    // если выделен (для IE)\r\n    if (document.selection) {\r\n      // записать выделенный текст\r\n      container = document.selection.createRange().parentElement();\r\n    }\r\n    // если выделен\r\n    else {\r\n      // диапазон текста, который пользователь выделил на странице\r\n      let select = window.getSelection();\r\n\r\n      // если количество диапазонов в выделении > 0\r\n      if (select.rangeCount > 0)\r\n        // записать выделенный текст\r\n        container = select.getRangeAt(0).startContainer.parentNode;\r\n    }\r\n\r\n    // если этот элемент не div и не li\r\n    // *** пояснение:\r\n    // * [div] -> чтобы нельзя было удалить сам блок .content при выделении всего содержимого\r\n    // * [li] -> чтобы нельзя было убирать формат списков (слишком много багов из-за этого) \r\n    if (container.nodeName !== 'DIV' && container.nodeName !== 'LI') {\r\n      container.outerHTML = container.innerHTML; // удалить родительский тег\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // преобразовать объект в массив ключей, чтобы можно было использовать .map    \r\n    let tagsArray = Object.keys(this.state.tagParameters);\r\n\r\n    let tagList = tagsArray.map((elem, index) => {\r\n      return (\r\n        <Button\r\n          key={index}\r\n          param={this.state}\r\n          clickEvent={this.setTag}\r\n          text={elem}\r\n          name={elem}\r\n          icon={this.state.tagParameters[elem].display[0]}\r\n        />\r\n      )      \r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={this.props.classes}\r\n      >\r\n        {tagList}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","// переменные \r\n\r\nexport const formatCommand_clear = 'clearFormat';\r\nexport const formatCommand_bgcolor = 'bgcolor';\r\nexport const formatCommand_color = 'color';\r\nexport const formatCommand_link = 'link';\r\n\r\n\r\nexport const default_bgcolor = '#ffeb3b';\r\nexport const default_color = '#f44336';","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class ButtonsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    // this.switchEditText = props.switchEditText;\r\n\r\n\r\n    this.download = this.download.bind(this);\r\n    this.undo = this.undo.bind(this);\r\n    this.redo = this.redo.bind(this);\r\n  }\r\n\r\n  // скачать отредактированный текст\r\n  download() {\r\n    // если режим редактирования выключен\r\n    if (!this.props.param.states.editText) {\r\n      let editableBlock = document.querySelector('.content'); // блок, текст в котором можно редактировать\r\n      let block = editableBlock.outerHTML; // текст внутри блока\r\n\r\n      let link = document.createElement(\"a\"); // сгенерировать ссылку\r\n      let file = new Blob([block], { type: 'txt' }); // сгенерировать файл\r\n      link.href = URL.createObjectURL(file); // сгенерировать href\r\n      link.download = \"text.txt\"; // название и расширение файла\r\n      link.click(); // имитировать нажатие на ссылку\r\n\r\n      // если режим редактирования НЕ выключен\r\n    } else {\r\n      alert('Перед скачиванием нужно выйти из режима редактирования.\\nИначе параметры редактирования не будут применены к тексту');\r\n    }\r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  undo() {\r\n    document.execCommand(\"undo\"); // Отмена последнего действия \r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  redo() {\r\n    document.execCommand(\"redo\"); // Повтор последнего действия \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Режим редактирования текста */}\r\n        {/* <Button\r\n          param={this.props.param}\r\n          on_off='true'\r\n          on_off_status={this.props.param.states.editText}\r\n          clickEvent={this.switchEditText}\r\n          text={this.props.param.buttons.edit}\r\n          icon='icon-edit'\r\n        /> */}\r\n\r\n        {/* КНОПКА Отменить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.undo}\r\n          text={this.props.param.buttons.undo}\r\n          icon='icon-undo'\r\n        />\r\n\r\n\r\n        {/* КНОПКА Повторить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.redo}\r\n          text={this.props.param.buttons.redo}\r\n          icon='icon-redo'\r\n        />\r\n\r\n        {/* КНОПКА Повторить */}\r\n        <Button\r\n          param={this.props.param}\r\n          clickEvent={this.download}\r\n          text={this.props.param.buttons.download}\r\n          icon='icon-save'\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.param\r\n    };\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label title={this.props.text || 'Input'}>\r\n        <span className={this.props.icon}>\r\n          {/* {this.props.text || 'Input'} */}\r\n        </span>\r\n        <input\r\n          type={this.props.type || 'text'}\r\n          name={this.props.name || 'btn'}\r\n          // value={this.props.param || this.state.value} // в этом случае сбрасывается значение\r\n          value={this.props.param} // в этом случае в консоли ошибка\r\n          step={this.props.step || ''}\r\n          onChange={this.eventHandler}\r\n        />\r\n      </label>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Input from './input';\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class MainSettingsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Вернуть стандартные настройки */}\r\n        {/* <Button\r\n          param={this.props.param}\r\n          clickEvent={this.reset}\r\n          text={this.props.param.buttons.reset}\r\n          icon=\"icon-clear\"\r\n          /> */}\r\n\r\n        {/* КНОПКА Режим редактирования текста */}\r\n        <Button\r\n          param={this.props.param}\r\n          on_off='true'\r\n          on_off_status={this.props.param.states.editText}\r\n          clickEvent={this.switchEditText}\r\n          text={this.props.param.buttons.edit}\r\n          icon='icon-edit'\r\n        />\r\n\r\n\r\n        {/* Размер шрифта */}\r\n        <Input\r\n          param={this.props.param.styles.fontSize}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"fontSize\"\r\n          text=\"Шрифт\"\r\n          icon=\"sprite icon-format_size_white\"\r\n        />\r\n\r\n\r\n        {/* Высота строки */}\r\n        <Input\r\n          param={this.props.param.styles.lineHeight}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"lineHeight\"\r\n          step=\"0.1\"\r\n          text=\"Высота строки\"\r\n          icon=\"sprite icon-line_height_white\"\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport { SketchPicker, SwatchesPicker } from 'react-color';\r\n\r\nimport Button from './button';\r\nimport ButtonPallet from './buttonPallet';\r\nimport TagsPanel from './tagsPanel';\r\nimport ButtonsPanel from './buttonsPanel';\r\nimport MainSettingsPanel from './mainSettingsPanel';\r\n\r\n\r\nimport {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link,\r\n  default_bgcolor,\r\n  default_color,\r\n} from '../vars';\r\n\r\n\r\n// панель редактирования\r\nexport default class EditorPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.switchShowColorPiper = this.switchShowColorPiper.bind(this);\r\n    this.changeColor = this.changeColor.bind(this);\r\n  }\r\n\r\n  // при изменении выбранного цвета в палитре\r\n  handleChange(color) {\r\n    this.setState((state) => ({\r\n      styles: {\r\n        ...state.styles,\r\n        [state.states.paletteEdit]: color.hex, // изменить цвет для палитры\r\n      }\r\n    }));\r\n  }\r\n\r\n  // смена статуса панели [показать/скрыть]\r\n  switchShowColorPiper() {\r\n    this.setState((state) => ({\r\n      states: {\r\n        ...state.states,\r\n        colorPicker: !state.states.colorPicker\r\n      }\r\n    }));\r\n  }\r\n\r\n\r\n  // при открытии панели выбора цвета, нажатием на палитру\r\n  changeColor(e) {\r\n    let param = e.target.getAttribute('name');\r\n\r\n    this.setState((state) => ({\r\n      states: {\r\n        ...state.states,\r\n        paletteEdit: param // изменить палитру, которую сейчас редактируем\r\n      }\r\n    }));\r\n\r\n    this.switchShowColorPiper();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"editor-panel\">\r\n          <h3 className=\"editor-panel__title\">\r\n            Панель редактирования\r\n        </h3>\r\n\r\n          <div className=\"editor-panel__inner\">\r\n            {/* основные настройки */}\r\n            <MainSettingsPanel\r\n              param={this.props.param}\r\n              classes=\"editor-panel__inner\"\r\n              eventHandler={this.setGlobalParam}\r\n              reset={this.reset}\r\n              switchEditText={this.switchEditText}\r\n            />\r\n\r\n            {/* панель с кнопками */}\r\n            <ButtonsPanel\r\n              param={this.props.param}\r\n              classes=\"editor-panel__inner\"\r\n            // switchEditText={this.switchEditText}\r\n            />\r\n\r\n\r\n            {/* Выбор цвета */}\r\n            <div className=\"editor-panel__inner\">\r\n              {/* Выбор цвета фона */}\r\n              <ButtonPallet\r\n                text=\"Установить цвет фона\"\r\n                icon=\"icon-format_paint_white\"\r\n                name={formatCommand_bgcolor}\r\n                clickEvent={this.changeColor}\r\n                style={this.state.styles.bgcolor}\r\n              />\r\n\r\n              {/* Выбор цвета текста */}\r\n              <ButtonPallet\r\n                text=\"Установить цвет текста\"\r\n                icon=\"icon-color_lens_white\"\r\n                name={formatCommand_color}\r\n                clickEvent={this.changeColor}\r\n                style={this.state.styles.color}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* настройка тегов */}\r\n          <TagsPanel\r\n            param={this.state}\r\n            classes=\"editor-panel__inner\"\r\n            switchShowColorPiper={this.switchShowColorPiper}\r\n          />\r\n        </div>\r\n\r\n\r\n        {/* Панель выбора цвета */}\r\n        <div\r\n          className={this.state.states.colorPicker ? 'color-picker-wp open' : 'color-picker-wp'}\r\n        >\r\n\r\n          {/* КНОПКА Закрыть */}\r\n          <Button\r\n            param={this.state}\r\n            clickEvent={this.switchShowColorPiper}\r\n            text='X Закрыть'\r\n            classes='color-picker__close'\r\n          />\r\n\r\n          <SwatchesPicker\r\n            onChange={this.handleChange}\r\n            color={this.state.styles.bgcolor}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n// Текст, который можно редактировать\r\nexport default class ContentEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n    \r\n    this.onBlur = this.props.onBlur;\r\n  }\r\n\r\n  render() {\r\n    let createContent = () => {\r\n      return { __html: this.props.param.html };\r\n    }\r\n\r\n    return (\r\n      <div\r\n        tabIndex=\"0\"\r\n        contentEditable={this.props.param.states.editText ? 'true' : 'false'}\r\n        suppressContentEditableWarning={true} // чтобы убрать в консоли предупреждение о contentEditable\r\n        className={this.props.param.states.editText ? 'content edit' : 'content'}\r\n        onBlur={this.onBlur} // событие при потере фокуса \r\n        dangerouslySetInnerHTML={createContent()} // вставить переданный текст\r\n        style={\r\n          {\r\n            fontSize: `${this.props.param.styles.fontSize}px`,\r\n            lineHeight: `${this.props.param.styles.lineHeight}em`\r\n          }\r\n        }\r\n      >\r\n      </div>\r\n    );\r\n  }\r\n};","// React\r\nimport React from 'react';\r\nimport sanitizeHtml from \"sanitize-html\";\r\nimport { render } from '@testing-library/react';\r\n\r\n// Мои компоненты\r\nimport EditorPanel from './components/editorPanel';\r\nimport ContentEditable from './components/contentEditable';\r\nimport Button from './components/button';\r\n\r\n// Стили\r\nimport './App.css';\r\nimport './sprite.css';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.data;\r\n\r\n    console.log('*** Начальные данные ***\\n', this.state);\r\n\r\n    this.setGlobalParam = this.setGlobalParam.bind(this);\r\n    this.switchEditText = this.switchEditText.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.sanitize = this.sanitize.bind(this);\r\n  }\r\n\r\n  // установить глобальные настройки\r\n  setGlobalParam(e) {\r\n    let inputName = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    this.setState({ styles: { [inputName]: [value] } });\r\n  }\r\n\r\n  // сбросить изменения параметров текста\r\n  reset() {\r\n    this.setState({\r\n      styles: {\r\n        fontSize: this.props.data.styles.fontSize,\r\n        lineHeight: this.props.data.styles.lineHeight,\r\n      }\r\n    });\r\n  }\r\n\r\n  // включить/отключить возможность редактировать текст\r\n  switchEditText() {\r\n    this.setState({\r\n      states: {\r\n        // заменить значение на противоположное\r\n        editText: !this.state.states.editText\r\n      }\r\n    });\r\n\r\n    // если режим редактирования выключен\r\n    if (this.state.states.editText) {\r\n      this.sanitize(); // записать новый текст, удалив неразрешённые теги\r\n    }\r\n  }\r\n\r\n  // записать новый текст, удалив неразрешённые теги\r\n  sanitize() {\r\n    let editableBlock = document.querySelector('.content'); // блок, текст в котором можно редактировать\r\n    let text = editableBlock.innerHTML; // текст внутри блока\r\n\r\n    // если текст изменился\r\n    if (text !== this.state.html) {\r\n      // записать новую версию текста, применив настройки (удалить пустые теги, заменить символы и пр.)\r\n      this.setState({\r\n        html: sanitizeHtml(text, this.state.sanitizeParam)\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"App\">\r\n\r\n        {/* панель редактирования */}\r\n        <EditorPanel\r\n          param={this.state}\r\n          setGlobalParam={this.setGlobalParam}\r\n          switchEditText={this.switchEditText}\r\n          reset={this.reset}\r\n        />\r\n\r\n\r\n        {/* блок, текст в котором можно редактировать */}\r\n        <ContentEditable\r\n          param={this.state}\r\n        />\r\n\r\n      </main>\r\n    );\r\n  };\r\n};","import {\r\n  formatCommand_clear,\r\n  formatCommand_bgcolor,\r\n  formatCommand_color,\r\n  formatCommand_link,\r\n  default_bgcolor,\r\n  default_color,\r\n} from './vars';\r\n\r\n// Начальные значения\r\nexport const startingValue = {\r\n  // стили\r\n  styles: {\r\n    fontSize: 16,\r\n    lineHeight: 2.2,\r\n\r\n    bgcolor: default_bgcolor,\r\n    color: default_color,\r\n  },\r\n\r\n  // состояния элементов \r\n  states: {\r\n    editText: true,\r\n    colorPicker: false,\r\n\r\n    paletteEdit: formatCommand_bgcolor, // какую панель цвета редактировать\r\n  },\r\n\r\n  // параметры для sanitize-html\r\n  sanitizeParam: {\r\n    // разрешённые в редактируемом блоке теги\r\n    allowedTags: false, // разрешить все теги\r\n    // allowedTags: [\r\n    //   'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\r\n    //   'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'sub', 'sup', 'span'\r\n    // ],\r\n    // разрешённые атрибуты\r\n    allowedAttributes: {\r\n      a: ['href', 'name', 'target'],\r\n      '*': ['style', 'color', 'bgcolor', 'background-color']\r\n    },\r\n    parser: {\r\n      lowerCaseTags: true\r\n    },\r\n    // заменить <x> на <y>\r\n    transformTags: {\r\n      'div': 'p',\r\n      'br': '',\r\n      'string': 'b',\r\n      'em': 'i',\r\n      'strike': 's',\r\n    },\r\n    // удалить пусте теги\r\n    exclusiveFilter: function (frame) {\r\n      return (\r\n        !frame.text.trim()\r\n      );\r\n    },\r\n  },\r\n\r\n  /*\r\n  * команды для редактирования текста\r\n  * если key записан в виде [keyName],\r\n  * то его название нужно менять в файле ./vars.js\r\n  * [эти названия используются где-то ещё в коде]\r\n  */\r\n  tagParameters: {\r\n    [formatCommand_clear]: {\r\n      command: [\r\n        ['removeFormat', false, ''],\r\n        ['unlink', false, ''],\r\n      ],\r\n      display: ['icon-format_clear']\r\n    },\r\n    h1: {\r\n      command: [\r\n        ['formatBlock', false, 'h1'],\r\n      ],\r\n      display: ['icon-title_1']\r\n    },\r\n    h2: {\r\n      command: [\r\n        ['formatBlock', false, 'h2'],\r\n      ],\r\n      display: ['icon-title_2']\r\n    },\r\n    h3: {\r\n      command: [\r\n        ['formatBlock', false, 'h3'],\r\n      ],\r\n      display: ['icon-title_3']\r\n    },\r\n    // h4: {\r\n    //   command: [\r\n    //     ['formatBlock', false, 'h4'],\r\n    //   ],\r\n    //   display: ['icon-save']\r\n    // },\r\n    // h5: {\r\n    //   command: [\r\n    //     ['formatBlock', false, 'h5'],\r\n    //   ],\r\n    //   display: ['icon-save']\r\n    // },\r\n    // h6: {\r\n    //   command: [\r\n    //     ['formatBlock', false, 'h6'],\r\n    //   ],\r\n    //   display: ['icon-save']\r\n    // },\r\n    p: {\r\n      command: [\r\n        ['formatBlock', false, 'p'],\r\n      ],\r\n      display: ['icon-text']\r\n    },\r\n    [formatCommand_link]: {\r\n      command: [\r\n        ['createLink', false, '#'], // нельзя менять и добавлять новые команды\r\n      ],\r\n      display: ['icon-insert_link']\r\n    },\r\n    ul: {\r\n      command: [\r\n        ['insertUnorderedList', false, ''],\r\n      ],\r\n      display: ['icon-format_list_bulleted']\r\n    },\r\n    ol: {\r\n      command: [\r\n        ['insertOrderedList', false, ''],\r\n      ],\r\n      display: ['icon-format_list_numbered']\r\n    },\r\n    b: {\r\n      command: [\r\n        ['bold', false, ''],\r\n      ],\r\n      display: ['icon-format_bold']\r\n    },\r\n    i: {\r\n      command: [\r\n        ['italic', false, ''],\r\n      ],\r\n      display: ['icon-format']\r\n    },\r\n    strike: {\r\n      command: [\r\n        ['strikeThrough', false, ''],\r\n      ],\r\n      display: ['icon-strikethrough']\r\n    },\r\n    [formatCommand_bgcolor]: {\r\n      command: [\r\n        ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n        ['hiliteColor', false, default_bgcolor],\r\n        ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n      ],\r\n      display: ['icon-format_paint']\r\n    },\r\n    [formatCommand_color]: {\r\n      command: [\r\n        ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n        ['foreColor', false, '#ff0000'],\r\n        ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n      ],\r\n      display: ['icon-color_lens']\r\n    },\r\n    sup: {\r\n      command: [\r\n        ['superscript', false, ''],\r\n      ],\r\n      display: ['icon-superscript']\r\n    },\r\n    sub: {\r\n      command: [\r\n        ['subscript', false, ''],\r\n      ],\r\n      display: ['icon-subscript']\r\n    },\r\n    underline: {\r\n      command: [\r\n        ['underline', false, ''],\r\n      ],\r\n      display: ['icon-format_underlined']\r\n    },\r\n    blockquote: {\r\n      command: [\r\n        ['formatBlock', false, 'blockquote'],\r\n      ],\r\n      display: ['icon-format_quote']\r\n    },\r\n    hr: {\r\n      command: [\r\n        ['insertHorizontalRule', false, ''],\r\n      ],\r\n      display: ['icon-line_horizontal']\r\n    },\r\n    left: {\r\n      command: [\r\n        ['justifyLeft', false, ''],\r\n      ],\r\n      display: ['icon-format_align_left']\r\n    },\r\n    center: {\r\n      command: [\r\n        ['justifyCenter', false, ''],\r\n      ],\r\n      display: ['icon-format_align_center']\r\n    },\r\n    right: {\r\n      command: [\r\n        ['justifyRight', false, ''],\r\n      ],\r\n      display: ['icon-format_align_right']\r\n    },\r\n    full: {\r\n      command: [\r\n        ['justifyFull', false, ''],\r\n      ],\r\n      display: ['icon-format_align_justify']\r\n    },\r\n  },\r\n\r\n  // кнопки\r\n  buttons: {\r\n    edit: 'Режим редактирования текста',\r\n    reset: 'Вернуть стандартные настройки',\r\n    undo: 'Отменить',\r\n    redo: 'Повторить',\r\n    download: 'Скачать текст с тегами',\r\n  },\r\n\r\n  // текст в редактируемом блоке\r\n  html: `\r\n  <p>v3</p>\r\n  <p><b>Редактируемый текст</b></p>\r\n  <p>Текст и его стили можно изменять, нажав на кнопку <b>Режим редактирования текста</b>.</p>\r\n  <p>Очистить формат текста можно, нажав на <b>clearFormat</b>.</p>\r\n  <p>Аксиома <strike>силлогизма</strike>, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание <i>непредсказуемо</i>. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс <sup>амбивалентно</sup> понимает</p>\r\n  <h2>Заголовок</h2>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n  <ul>\r\n  <li>Аксиома</li>\r\n  <li>силлогизма</li>\r\n  <li>по определению</li>\r\n  </ul>\r\n  <blockquote>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</blockquote>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n`\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport {startingValue} from './startingValue';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Начальные значения\r\nconst data = startingValue;\r\n\r\nReactDOM.render(<App data={data} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}