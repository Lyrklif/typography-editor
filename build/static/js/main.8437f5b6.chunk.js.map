{"version":3,"sources":["components/tag.js","components/tagsPanel.js","components/button.js","components/buttonsPanel.js","components/input.js","components/mainSettingsPanel.js","components/editorPanel.js","App.js","serviceWorker.js","index.js"],"names":["Tag","props","eventHandler","onClick","this","className","classes","name","text","React","Component","TagsPanel","state","param","tagList","Object","keys","formatСommand","map","elem","index","key","Button","clickEvent","on_off","on_off_status","ButtonsPanel","setGlobalParam","reset","switchEditText","e","target","value","editText","buttons","edit","Input","type","step","onChange","MainSettingsPanel","styles","fontSize","lineHeight","EditorPanel","setTag","App","sanitize","setState","html","sanitizeHtml","sanitizeParam","setNewText","data","console","log","bind","inputName","preventDefault","tag","commands","document","execCommand","i","length","toUpperCase","style","tabIndex","tagName","disabled","onBlur","Boolean","window","location","hostname","match","ReactDOM","render","states","allowedTags","allowedAttributes","a","clearFormat","h1","h2","h3","h4","h5","h6","p","ul","ol","b","strike","bgcolor","color","sup","sub","underline","blockquote","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8437f5b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Tag extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = props;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        onClick={this.eventHandler}\r\n        className={this.props.classes}\r\n        name={this.props.text}\r\n      >\r\n        {this.props.text || 'Tag'}\r\n      </button>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Tag from './tag';\r\n\r\n// настройка тегов\r\nexport default class TagsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    // преобразовать объект в массив ключей, чтобы можно было использовать .map    \r\n    let tagsArray = Object.keys(this.state.formatСommand);\r\n\r\n    let tagList = tagsArray.map((elem, index) => {\r\n      return (\r\n        <Tag\r\n          key={index}\r\n          param={this.state}\r\n          eventHandler={this.eventHandler}\r\n          text={elem}\r\n          classes=\"tag\"\r\n        />\r\n      )\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className={this.props.classes}\r\n      >\r\n        {tagList}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\n\r\n// button\r\nexport default class Button extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = props;\r\n\r\n    this.clickEvent = props.clickEvent;\r\n  }\r\n\r\n  render() {\r\n    // если это кнопка on/off\r\n    if (this.props.on_off) {\r\n      return (\r\n        <button\r\n          className={this.props.on_off_status ? 'on' : 'off'}\r\n          onClick={this.clickEvent}\r\n        >\r\n          <b className=\"uppercase\">\r\n            {this.props.on_off_status ? 'on' : 'off'}\r\n          </b>\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n\r\n      // иначе вернуть обычную кнопку\r\n    } else {\r\n      return (\r\n        <button onClick={this.clickEvent} >\r\n          {this.props.text || 'Button'}\r\n        </button >\r\n      )\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class ButtonsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n  }\r\n\r\n\r\n  setParam(e) {\r\n    this.setGlobalParam(e.target.value, e.target.name);\r\n  }\r\n\r\n  reset() {\r\n    this.reset();\r\n  }\r\n\r\n  switchEditText() {\r\n    this.switchEditText();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n        {/* КНОПКА Режим редактирования текста */}\r\n        <Button\r\n          param={this.props.param}\r\n          on_off='true'\r\n          on_off_status={this.props.param.editText}\r\n          clickEvent={this.switchEditText}\r\n          text={this.props.param.buttons.edit}\r\n        />\r\n\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n// Поле ввода\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.param\r\n    };\r\n\r\n    this.eventHandler = props.eventHandler;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label>\r\n        {this.props.text || 'Input'}\r\n        <input\r\n          type={this.props.type || 'text'}\r\n          name={this.props.name || 'btn'}\r\n          // value={this.props.param || this.state} // из-за этого баг со сбросом значения\r\n          value={this.props.param} // из-за этого в консоли ошибка\r\n          step={this.props.step || ''}\r\n          onChange={e => this.eventHandler(e.target.value, e.target.name)}\r\n        />\r\n      </label>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport Input from './input';\r\nimport Button from './button';\r\n\r\n// настройка тегов\r\nexport default class MainSettingsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.param;\r\n\r\n    this.eventHandler = props.eventHandler;\r\n    this.reset = props.reset;\r\n  }\r\n\r\n\r\n  setParam(e) {\r\n    this.eventHandler(e.target.value, e.target.name);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes}>\r\n\r\n          {/* КНОПКА Вернуть стандартные настройки */}\r\n          <Button\r\n            param={this.props.param}\r\n            clickEvent={this.reset}\r\n            text={this.props.param.buttons.reset}\r\n          />\r\n\r\n        {/* Размер шрифта */}\r\n        <Input\r\n          param={this.props.param.styles.fontSize}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"fontSize\"\r\n          text=\"Размер шрифта\"\r\n        />\r\n\r\n\r\n        {/* Высота строки */}\r\n        <Input\r\n          param={this.props.param.styles.lineHeight}\r\n          eventHandler={this.eventHandler}\r\n          type=\"number\"\r\n          name=\"lineHeight\"\r\n          step=\"0.1\"\r\n          text=\"Высота строки\"\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nimport TagsPanel from './tagsPanel';\r\nimport ButtonsPanel from './buttonsPanel';\r\nimport MainSettingsPanel from './mainSettingsPanel';\r\n\r\n// панель редактирования\r\nexport default class EditorPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = props;\r\n\r\n    this.setGlobalParam = props.setGlobalParam;\r\n    this.reset = props.reset;\r\n    this.switchEditText = props.switchEditText;\r\n    this.setTag = props.setTag;\r\n  }\r\n\r\n\r\n  setParam(e) {\r\n    this.setGlobalParam(e.target.value, e.target.name);\r\n  }\r\n\r\n  reset() {\r\n    this.reset();\r\n  }\r\n\r\n  switchEditText() {\r\n    this.switchEditText();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"editor-panel\">\r\n        <h3 className=\"editor-panel__title\">\r\n          Панель редактирования\r\n        </h3>\r\n\r\n        {/* основные настройки */}\r\n        <MainSettingsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner\"\r\n          eventHandler={this.setGlobalParam}\r\n          reset={this.reset}\r\n        />\r\n\r\n\r\n        {/* настройка тегов */}\r\n        <TagsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner\"\r\n          eventHandler={this.setTag}\r\n        />\r\n\r\n\r\n        {/* панель с кнопками */}\r\n        <ButtonsPanel\r\n          param={this.props.param}\r\n          classes=\"editor-panel__inner editor-panel__buttons\"\r\n          setGlobalParam={this.setGlobalParam}\r\n          reset={this.reset}\r\n          switchEditText={this.switchEditText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};","// React\r\nimport React from 'react';\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport sanitizeHtml from \"sanitize-html\";\r\nimport { render } from '@testing-library/react';\r\n\r\n// Мои компоненты\r\nimport EditorPanel from './components/editorPanel';\r\n// import ContentEditable from './components/contentEditable';\r\n\r\n// Стили\r\nimport './App.css';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.data;\r\n\r\n    console.log('*** Начальные данные ***\\n', this.state);\r\n\r\n    this.setGlobalParam = this.setGlobalParam.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.switchEditText = this.switchEditText.bind(this);\r\n    this.setTag = this.setTag.bind(this);\r\n  }\r\n\r\n  // установить глобальные настройки\r\n  setGlobalParam(value, inputName) {\r\n    this.setState({ styles: { [inputName]: [value] } });\r\n  }\r\n\r\n  // установить тег (форматирование текста)\r\n  setTag(e) {\r\n    e.preventDefault();\r\n\r\n    let tag = e.target.name;\r\n    let commands = this.state.formatСommand[tag];\r\n\r\n    // если команда для этого тега существует\r\n    if (commands) {\r\n      // document.execCommand('Название команды', false, значение (если требуется));\r\n\r\n      if (tag === 'color') {\r\n        document.execCommand('styleWithCSS', false, 'true');\r\n        document.execCommand('foreColor', false, '#ff0000');\r\n        document.execCommand('styleWithCSS', false, 'false');\r\n      } else {\r\n\r\n        // применить все заданные команды из массива\r\n        for (let i = 0; i < commands.length; i++) {\r\n          document.execCommand(commands[i][0], commands[i][1], commands[i][2].toUpperCase());\r\n        }\r\n      }\r\n\r\n\r\n    } else {\r\n      console.log('Правила форматирования для этого тега не прописаны. Сделайте это в файле index.js в data.formatСommand')\r\n    }\r\n  }\r\n\r\n  // сбросить изменения  параметров\r\n  reset() {\r\n    // this.setState(this.props.data); // вернуть ВСЕ начальные значения\r\n\r\n    this.setState({\r\n      styles: {\r\n        fontSize: this.props.data.styles.fontSize,\r\n        lineHeight: this.props.data.styles.lineHeight,\r\n      }\r\n    });\r\n  }\r\n\r\n  sanitize = () => {\r\n    this.setState({ html: sanitizeHtml(this.state.html, this.state.sanitizeParam) });\r\n  };\r\n\r\n\r\n  // включить/отключить возможность редактировать текст\r\n  switchEditText() {\r\n    // заменить значение на противоположное\r\n    this.setState({\r\n      editText: !this.state.editText\r\n    });\r\n  }\r\n\r\n  // записать новый текст\r\n  setNewText = (e) => {\r\n    this.setState({\r\n      html: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <main className=\"App\">\r\n\r\n        {/* панель редактирования */}\r\n        <EditorPanel\r\n          param={this.state}\r\n          setGlobalParam={this.setGlobalParam}\r\n          reset={this.reset}\r\n          switchEditText={this.switchEditText}\r\n          setTag={this.setTag}\r\n        />\r\n\r\n        {/* блок, текст в котором можно редактировать */}\r\n        <ContentEditable\r\n          className={this.state.editText ? 'editable content edit' : 'editable content'}\r\n          style={\r\n            {\r\n              fontSize: `${this.state.styles.fontSize}px`,\r\n              lineHeight: `${this.state.styles.lineHeight}em`\r\n            }\r\n          }\r\n          tabIndex=\"0\"\r\n          tagName=\"div\" // установить тег для элемента\r\n          html={this.state.html} // записать значение блока\r\n          disabled={!this.state.editText} // вкл/выкл возможность редактировать текст\r\n          onChange={(e) => this.setNewText(e)} // событие при изменении текста\r\n          onBlur={this.sanitize} // при потере фокуса удалить неразрешённые теги \r\n        />\r\n\r\n      </main>\r\n    );\r\n  };\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Начальные значения\r\nconst data = {\r\n  // стили текста\r\n  styles: {\r\n    fontSize: 16,\r\n    lineHeight: 2.2,\r\n  },\r\n\r\n  // состояния элементов \r\n  states: {\r\n    editText: false,\r\n  },\r\n\r\n  // параметры для sanitize-html\r\n  sanitizeParam: {\r\n    // разрешённые в редактируемом блоке теги\r\n    allowedTags: false, // разрешить все теги\r\n    // allowedTags: [\r\n    //   'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',\r\n    //   'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'sub', 'sup', 'span', 'blockquote'\r\n    // ],\r\n    // разрешённые атрибуты\r\n    allowedAttributes: {\r\n      a: ['href', 'name', 'target'],\r\n      '*': ['style', 'color', 'bgcolor', 'background-color']\r\n    }\r\n  },\r\n\r\n  // команды для редактирования текста\r\n  formatСommand: {\r\n    clearFormat: [\r\n      ['removeFormat', false, ''],\r\n      ['unlink', false, ''],\r\n      ['formatBlock', false, 'p'],\r\n    ],\r\n    h1: [\r\n      ['formatBlock', false, 'h1'],\r\n    ],\r\n    h2: [\r\n      ['formatBlock', false, 'h2'],\r\n    ],\r\n    h3: [\r\n      ['formatBlock', false, 'h3'],\r\n    ],\r\n    h4: [\r\n      ['formatBlock', false, 'h4'],\r\n    ],\r\n    h5: [\r\n      ['formatBlock', false, 'h5'],\r\n    ],\r\n    h6: [\r\n      ['formatBlock', false, 'h6'],\r\n    ],\r\n    p: [\r\n      ['formatBlock', false, 'p'],\r\n    ],\r\n    a: [\r\n      ['createLink', false, '#'],\r\n    ],\r\n    ul: [\r\n      ['insertUnorderedList', false, ''],\r\n    ],\r\n    ol: [\r\n      ['insertOrderedList', false, ''],\r\n    ],\r\n    b: [\r\n      ['bold', false, ''],\r\n    ],\r\n    i: [\r\n      ['italic', false, ''],\r\n    ],\r\n    strike: [\r\n      ['strikeThrough', false, ''],\r\n    ],\r\n    bgcolor: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['hiliteColor', false, 'ffff00'],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    color: [\r\n      ['styleWithCSS', false, 'true'], // использовать стили, а не html\r\n      ['foreColor', false, '#ff0000'],\r\n      ['styleWithCSS', false, 'false'], // использовать html, а не стили\r\n    ],\r\n    sup: [\r\n      ['superscript', false, ''],\r\n    ],\r\n    sub: [\r\n      ['subscript', false, ''],\r\n    ],\r\n    underline: [\r\n      ['underline', false, ''],\r\n    ],\r\n    blockquote: [\r\n      ['formatBlock', false, 'blockquote'],\r\n    ],\r\n  },\r\n\r\n  // кнопки\r\n  buttons: {\r\n    edit: 'Режим редактирования текста',\r\n    reset: 'Вернуть стандартные настройки'\r\n  },\r\n\r\n  // текст в редактируемом блоке\r\n  html: `\r\n  <p>v2</p>\r\n  <p><b>Редактируемый текст</b></p>\r\n  <p>Текст и его стили можно изменять, нажав на кнопку <b>Режим редактирования текста</b>.</p>\r\n  <p>Очистить формат текста можно, нажав на <b>clearFormat</b>.</p>\r\n  <p>Аксиома <strike>силлогизма</strike>, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание <i>непредсказуемо</i>. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс <sup>амбивалентно</sup> понимает</p>\r\n  <h2>Заголовок</h2>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n  <ul>\r\n  <li>Аксиома</li>\r\n  <li>силлогизма</li>\r\n  <li>по определению</li>\r\n  </ul>\r\n  <blockquote>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. Смысл жизни, следовательно, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</blockquote>\r\n  <p>Аксиома силлогизма, по определению, представляет собой неоднозначный предмет деятельности. \r\n  Наряду с этим ощущение мира решительно контролирует непредвиденный гравитационный парадокс. \r\n  Созерцание непредсказуемо. <a href=\"#\">Смысл жизни</a>, <b>следовательно</b>, творит данный закон внешнего мира. \r\n  Апостериори, гравитационный парадокс амбивалентно понимает</p>\r\n`\r\n}\r\n\r\nReactDOM.render(<App data={data} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}